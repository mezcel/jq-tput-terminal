#!/bin/bash

function compileJq {
	## Manually compile jq if needed
	git clone https://github.com/stedolan/jq.git

	cd jq

	git submodule update --init # if building from git to get oniguruma
	autoreconf -fi              # if building from git
	./configure --with-oniguruma=builtin
	make -j8
	make check

	## To build a statically linked version of jq, run:
	make LDFLAGS=-all-static

	## After make finishes, you'll be able to use ./jq. You can also install it using:
	sudo make install
}

function packageManagerPacman {
	## Pacman
	sudo pacman -Sy
	
	# sudo pacman -S --needed bash xterm grep sed wget gawk bc curl ncurses dialog jq gcc vorbis-tools elinks git
	currentDirPath=$(dirname $0)	
	sudo pacman -S --needed - < $currentDirPath/pacman_pkglist.txt

	## Fix for ogg123 (vorbis-tools) ## I just commented out a line
	if [ -f /etc/libao.conf ]; then
		sed -i -e 's/dev=default/# dev=default/g' /etc/libao.conf
	fi

	## make a confirmation flag
	## conirm package install pacman -Qs <packagename>
	echo "Installed using pacman on $(date)" > $currentDirPath/installedFlag
}

function packageManagerAlpine {
	## Apk
	sudo apk add bash xterm grep sed wget gawk bc curl ncurses dialog jq gcc vorbis-tools elinks git

	## make a confirmation flag
	currentDirPath=$(dirname $0)
	echo "Installed using pacman on $(date)" > $currentDirPath/installedFlag
}


function packageManagerDPKG {
	## Debian Apt
	sudo apt-get update
	
	sudo apt-get install bash xterm grep sed wget gawk bc curl grep sed wget gawk bc curl libncurses5-dev libncursesw5-dev dialog jq gcc vorbis-tools elinks

	## make a confirmation flag
	currentDirPath=$(dirname $0)
	echo "Installed using pacman on $(date)" > $currentDirPath/installedFlag
}

function packageManagerSlapt {
	## SlackApt
	sudo slapt-get --update
	
	sudo slapt-get --install bash xterm grep sed wget gawk bc curl grep sed wget gawk bc curl libncurses5-dev libncursesw5-dev dialog jq gcc vorbis-tools elinks
	
	compileJq

	## make a confirmation flag
	currentDirPath=$(dirname $0)
	echo "Installed using pacman on $(date)" > $currentDirPath/installedFlag
}

function identifyPackageManager {
	
	if [ -f /etc/os-release ]; then
		distroName=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
	fi

	if [ -d /etc/dpkg ] ; then
		distroType="Debian"
		packageManager="apt"
		
		return
	fi

	if [ -d /etc/pacman.d ] ; then
		distroType="Arch"
		packageManager="pacman"
		return
	fi

	## if [ -d /etc/apk ] ; then
	if [ $distroName -eq "Alpine Linux" ]; then
		distroType="Alpine"
		packageManager="apk"

		return
	fi

	if [ $distroName -eq "Slackware" ]; then
		distroType="Slackware"
		packageManager="slapt"

		return
	fi
	
}

function download_gnu_software {
	
	currentDirPath=$(dirname $0)
	
	if [ ! -f $currentDirPath/installedFlag ] ; then

		identifyPackageManager

		case $packageManager in
			"pacman")
				packageManagerPacman
				;;
			"apt")
				packageManagerDPKG
				;;
			"apk")
				packageManagerAlpine
				;;
			"slapt")
				packageManagerSlapt
				;;
		esac
	
	fi

}

## RUN

download_gnu_software
