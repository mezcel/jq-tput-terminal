#!/bin/bash

## Manual JQ package compile
function compileJq {
	## Manually compile jq if needed

	currentDirPath=$(dirname $0)

	command -v jq
	isJqInstalled=$?
	if [ isJqInstalled -eq 1 ]; then
		git clone https://github.com/stedolan/jq.git

		cd jq

		git submodule update --init # if building from git to get oniguruma
		autoreconf -fi              # if building from git
		./configure --with-oniguruma=builtin
		make -j8
		make check

		## To build a statically linked version of jq, run:
		make LDFLAGS=-all-static

		## After make finishes, you'll be able to use ./jq. You can also install it using:
		sudo make install
	fi

}

## Arch based distros
function packageManagerPacman {
	## Pacman in silen mode
	echo "package manager update ..."
	sudo pacman -Sy

	declare -a missingPackageArr=()
	count=0

	## Check if required software is allready installed
	## Add missing packages to an array of missing packages
	currentDirPath=$(dirname $0)
	while read linePackage
	do
	    count=$(( $count + 1 ))
	    statusMsg=$(pacman -Qs $linePackage)
	    isPackageMissing=$?
	    if [ $isPackageMissing -eq 1 ]; then
	        missingPackageArr+=($linePackage)
	    fi
	done < $currentDirPath/pacman_pkglist.txt

	## Install only the missing packages
	## -Sy install and sync. Needed for alsa and pulse audio to config properly ???
	for (( i=1; i<${#missingPackageArr[@]}+1; i++ ));
	do
		# sudo pacman -S --needed ${missingPackageArr[$i-1]}
		sudo pacman -Sy --needed --noconfirm ${missingPackageArr[$i-1]}
		## make a confirmation log
		echo "Performed pacman -S --needed ${missingPackageArr[$i-1]} on: $(date)" >> $currentDirPath/installationLog
	done

	## ogg123 fix for alsa
	sleep 2s
	sudo sed -i -e 's/dev=default/#dev=default/g' /etc/libao.conf
}

## Debian based distros
function packageManagerDPKG {
	## Debian Apt
	# sudo apt-get update -qq
	echo "package manager update ..."
	sudo apt-get update

	declare -a missingPackageArr=()
	count=0

	## Check if required software is allready installed
	## Add missing packages to an array of missing packages
	currentDirPath=$(dirname $0)
	while read linePackage
	do
		count=$(( $count + 1 ))
		statusMsg=$(dpkg -s $linePackage 2> /dev/null |  grep Status)
		isPackageMissing=$?
		if [ $isPackageMissing -eq 1 ]; then
			missingPackageArr+=($linePackage)
		fi
	done < $currentDirPath/dpkg_pkglist.txt

	## Install only the missing packages
	for (( i=1; i<${#missingPackageArr[@]}+1; i++ ));
	do
	  sudo apt-get install  ${missingPackageArr[$i-1]}
	  ## make a confirmation log
	  echo "Performed apt-get install -y ${missingPackageArr[$i-1]} on: $(date)" >> $currentDirPath/installationLog
	done
}

## Alpine Linux
function packageManagerAlpine {
	## Apk
	sudo apk update

	# sudo apk add bash xterm grep sed wget gawk bc curl ncurses dialog jq gcc vorbis-tools elinks git
	currentDirPath=$(dirname $0)
	while read linePackage
	do
		sudo apk add $linePackage
	done < $currentDirPath/pacman_pkglist.txt

	## make a confirmation flag
	currentDirPath=$(dirname $0)
	echo "Installed using apk on $(date)" > $currentDirPath/installedFlag
}

## Slackware based distros
function packageManagerSlapt {
	## SlackApt
	sudo slapt-get --update

	currentDirPath=$(dirname $0)
	while read linePackage
	do
		sudo slapt-get --install $linePackage
	done < $currentDirPath/dpkg_pkglist.txt

	compileJq

	## make a confirmation flag
	currentDirPath=$(dirname $0)
	echo "Installed using slapt on $(date)" > $currentDirPath/installedFlag
}

function testPing {
	ping -c1 $myPingAddr &>/dev/null
	pingFlag=$?
}

function identifyPackageManager {

	if [ -f /etc/os-release ]; then
		distroName=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
	fi

	if [ -d /etc/dpkg ] ; then
		distroType="Debian"
		packageManager="apt"
		myPingAddr="debian.org"
		testPing
		return
	fi

	if [ -d /etc/pacman.d ] ; then
		distroType="Arch"
		packageManager="pacman"
		myPingAddr="archlinux.org"
		testPing
		return
	fi

	if [ -d /etc/apk ] ; then
		distroType="Alpine"
		packageManager="apk"
		myPingAddr="alpinelinux.org"
		testPing
		return
	fi

	## if [ -d /etc/slapt-get ]; then
	if [ -d /var/slapt-get ]; then
		distroType="Slackware"
		packageManager="slapt"
		myPingAddr="slackware.com"
		testPing
		return
	fi

}

function tryAgainLater {
	clear
	echo "This App will not install dependencies at this time.

	No Internet. No online dependency installation
	Tested on $myPingAddr

	You may have most of the dependancies anyway.
	The ones you probably won't have are: ncurses, dialog, vorbis-tools, and jq


	"
	echo "Press [enter] to exit. Connect to the internet and try again."
	read

	exit
}

function getLatestRepoUpdates {
	# git remote update ## to bring remote refs up to date
	echo "Importing updates from https://github.com/mezcel/jq-tput-terminal.git ..."
	git pull
}

function download_gnu_software {
	getLatestRepoUpdates

	identifyPackageManager

	if [[ $pingFlag -eq 0 ]]; then
		case $packageManager in
			"pacman")
				packageManagerPacman
				;;
			"apt")
				packageManagerDPKG
				;;
			"apk")
				packageManagerAlpine
				;;
			"slapt")
				packageManagerSlapt
				;;
		esac
	fi

	## changes to gunu will take effect the next time this app runs
	## getLatestRepoUpdates

}

## RUN

download_gnu_software
